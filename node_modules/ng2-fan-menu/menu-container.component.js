"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var animations_1 = require("@angular/animations");
var menu_options_service_1 = require("./menu-options.service");
var menu_spin_service_1 = require("./menu-spin.service");
var MenuContainerComponent = (function () {
    function MenuContainerComponent(menuOptions, spinService, renderer, elm) {
        this.menuOptions = menuOptions;
        this.spinService = spinService;
        this.renderer = renderer;
        this.elm = elm;
        this.onWingSelected = new core_1.EventEmitter();
        this.onWingHovered = new core_1.EventEmitter();
        this.onMenuBtnClicked = new core_1.EventEmitter();
        this.onMenuListSpinning = new core_1.EventEmitter();
        this.allowTransition = true;
        this.isDragging = false;
        this.isSpinning = false;
        this.menuState = true;
        this.draggingState = { value: false, params: { top: this.top, left: this.left } };
    }
    MenuContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.menuOptions.setMenuOptions(this.options, this.gutter, this.startAngles);
        this.menuConfig = this.menuOptions.MenuConfig;
        this.wingsState = this.menuConfig.defaultOpen;
        this.positionClass = this.menuConfig.defaultPosition;
        this.setElementsStyle();
        this.calculateSvgPath();
        this.setHostElementPosition(this.positionClass);
        this.menuSpunSubscriptionId =
            this.spinService.wingSpun.subscribe(function (data) { return _this.spinMenu(data); });
    };
    MenuContainerComponent.prototype.ngOnDestroy = function () {
        this.menuSpunSubscriptionId.unsubscribe();
    };
    MenuContainerComponent.prototype.animationDone = function () {
        this.allowTransition = true;
    };
    MenuContainerComponent.prototype.clickWing = function (wing) {
        this.onWingSelected.emit(wing);
    };
    MenuContainerComponent.prototype.hoverWing = function (wing) {
        if (!this.isDragging && !this.isSpinning) {
            this.onWingHovered.emit(wing);
        }
    };
    MenuContainerComponent.prototype.toggleMenu = function () {
        if (this.allowTransition) {
            this.wingsState = !this.wingsState;
            this.allowTransition = false;
            this.onMenuBtnClicked.emit(this.wingsState);
        }
    };
    MenuContainerComponent.prototype.onPanStart = function () {
        this.isDragging = true;
        this.draggingState = { value: true, params: { top: this.top, left: this.left } };
    };
    MenuContainerComponent.prototype.onPanEnd = function () {
        this.draggingState = { value: false, params: { top: this.top, left: this.left } };
        var centreX = window.innerWidth / 2 -
            this.menuConfig.buttonWidth / 2;
        var centreY = window.innerHeight / 2 -
            this.menuConfig.buttonWidth / 2;
        if (this.top > centreY && this.left < centreX) {
            this.positionClass = 'bottomLeft';
        }
        else if (this.top < centreY && this.left < centreX) {
            this.positionClass = 'topLeft';
        }
        else if (this.top < centreY && this.left > centreX) {
            this.positionClass = 'topRight';
        }
        else if (this.top > centreY && this.left > centreX) {
            this.positionClass = 'bottomRight';
        }
        this.setHostElementPosition(this.positionClass);
        this.isDragging = false;
    };
    MenuContainerComponent.prototype.onMenuMove = function (event) {
        if (this.isDragging) {
            var y = event.center.y;
            var x = event.center.x;
            this.top = y - this.menuConfig.buttonWidth / 2;
            this.left = x - this.menuConfig.buttonWidth / 2;
            this.renderer.setStyle(this.elm.nativeElement, 'top', this.top + 'px');
            this.renderer.setStyle(this.elm.nativeElement, 'left', this.left + 'px');
        }
    };
    MenuContainerComponent.prototype.onMouseOverMenu = function () {
        if (this.menuBtnStyle['opacity'] < 1) {
            this.menuBtnStyle['opacity'] = 1;
        }
    };
    MenuContainerComponent.prototype.onMouseOutMenu = function () {
        if (this.menuConfig.buttonOpacity < 1 && !this.wingsState) {
            this.menuBtnStyle['opacity'] = this.menuConfig.buttonOpacity;
        }
    };
    MenuContainerComponent.prototype.spinMenu = function (deg) {
        this.renderer.setStyle(this.menuWingsElm.nativeElement, 'transform', 'rotate(' + deg + 'deg)');
    };
    MenuContainerComponent.prototype.toggleSpinningState = function (state) {
        if (state) {
            this.onMenuListSpinning.emit(true);
        }
        this.isSpinning = state;
        return;
    };
    MenuContainerComponent.prototype.setElementsStyle = function () {
        this.renderer.setStyle(this.elm.nativeElement, 'width', this.menuConfig.buttonWidth + 'px');
        this.renderer.setStyle(this.elm.nativeElement, 'height', this.menuConfig.buttonWidth + 'px');
        this.renderer.setStyle(this.elm.nativeElement, 'font-family', this.menuConfig.font);
        this.menuBtnStyle = {
            'background': this.menuConfig.buttonBackgroundColor,
            'color': this.menuConfig.buttonFontColor,
            'font-size.px': this.menuConfig.buttonFontSize,
            'font-weight': this.menuConfig.buttonFontWeight,
        };
        if (!this.wingsState) {
            this.menuBtnStyle['opacity'] = this.menuConfig.buttonOpacity;
        }
        this.menuWingsStyle = {
            'top.px': -(this.menuConfig.radius - this.menuConfig.buttonWidth) / 2,
            'left.px': +this.menuConfig.buttonWidth / 2,
            'width.px': +this.menuConfig.radius,
            'height.px': +this.menuConfig.radius,
        };
        return;
    };
    MenuContainerComponent.prototype.setHostElementPosition = function (positionName) {
        this.top = this.menuOptions.MenuPositions[positionName].top;
        this.left = this.menuOptions.MenuPositions[positionName].left;
        this.renderer.setStyle(this.elm.nativeElement, 'top', this.top + 'px');
        this.renderer.setStyle(this.elm.nativeElement, 'left', this.left + 'px');
        this.menuOptions.Center = { x: this.left, y: this.top };
        return;
    };
    MenuContainerComponent.prototype.calculateSvgPath = function () {
        var buttonWidth = +this.menuConfig.buttonWidth;
        var offset = +this.menuConfig.offset;
        var angle = +this.menuConfig.angle;
        var radius = +this.menuConfig.radius;
        var innerRadius = buttonWidth / 2 + offset;
        var x1 = Math.floor(radius * Math.cos(Math.PI * (360 - angle / 2) / 180));
        var y1 = Math.floor(radius / 2 + radius * Math.sin(Math.PI * (360 - angle / 2) / 180));
        var x2 = Math.floor(radius * Math.cos(Math.PI * (angle / 2) / 180));
        var y2 = Math.floor(radius / 2 + radius * Math.sin(Math.PI * (angle / 2) / 180));
        var a1 = Math.floor(innerRadius * Math.cos(Math.PI * (360 - angle / 2) / 180));
        var b1 = Math.floor(radius / 2 + innerRadius * Math.sin(Math.PI * (360 - angle / 2) / 180));
        var a2 = Math.floor(innerRadius * Math.cos(Math.PI * (angle / 2) / 180));
        var b2 = Math.floor(radius / 2 + 1 + innerRadius * Math.sin(Math.PI * (angle / 2) / 180));
        this.svgPath = 'M' + a1 + ',' + b1 + ' L' + x1 + ',' + y1 + ' A' +
            radius + ',' + radius + ' 0 0, 1' + ' ' + x2 + ',' + y2 +
            ' L' + a2 + ',' + b2 + '  A' + innerRadius + ',' + innerRadius +
            ' 1 0, 0' + ' ' + a1 + ',' + b1 + ' z';
        return;
    };
    return MenuContainerComponent;
}());
MenuContainerComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'app-menu-container',
                template: "<div class=\"menu-container\"><button class=\"menu-btn\" [ngStyle]=\"menuBtnStyle\" (mouseenter)=\"onMouseOverMenu()\" (mouseleave)=\"onMouseOutMenu()\" (tap)=\"toggleMenu()\" (panstart)=\"onPanStart()\" (panend)=\"onPanEnd()\" [@btnText]=\"wingsState\" (@btnText.done)=\"animationDone($event)\"><span class=\"btn-cross\" *ngIf=\"wingsState;else elseBlock\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" id=\"cross\" class=\"img\" x=\"0px\" y=\"0px\" viewBox=\"0 0 212.982 212.982\" style=\"enable-background:new 0 0 212.982 212.982\" xml:space=\"preserve\" [attr.width]=\"menuConfig.buttonCrossImgSize\" [attr.height]=\"menuConfig.buttonCrossImgSize\"><g id=\"Close\"><path style=\"fill-rule:evenodd;clip-rule:evenodd\" [attr.fill]=\"menuConfig.buttonFontColor\" d=\"M131.804,106.491l75.936-75.936c6.99-6.99,6.99-18.323,0-25.312   c-6.99-6.99-18.322-6.99-25.312,0l-75.937,75.937L30.554,5.242c-6.99-6.99-18.322-6.99-25.312,0c-6.989,6.99-6.989,18.323,0,25.312   l75.937,75.936L5.242,182.427c-6.989,6.99-6.989,18.323,0,25.312c6.99,6.99,18.322,6.99,25.312,0l75.937-75.937l75.937,75.937   c6.989,6.99,18.322,6.99,25.312,0c6.99-6.99,6.99-18.322,0-25.312L131.804,106.491z\"/></g></svg></span><ng-template #elseBlock><span class=\"btn-text\">Menu</span></ng-template></button><div class=\"menu-wings\" [ngStyle]=\"menuWingsStyle\" #menuWings><div class=\"wing-wrapper\" *ngFor=\"let wing of wings; let i = index\"><app-menu-wing *ngIf=\"wingsState\" [position]=\"positionClass\" [wing]=\"wing\" [svgPath]=\"svgPath\" [index]=\"i\" (wingSpinning)=\"toggleSpinningState($event)\" (wingClicked)=\"clickWing($event)\" (wingHovered)=\"hoverWing($event)\"></app-menu-wing></div></div></div>",
                styles: [":host{display:block;position:fixed;z-index:99999}.menu-container{width:100%;height:100%}.menu-btn{-moz-box-shadow:-2px 6px 12px #8e8e8e;box-shadow:-2px 6px 12px #8e8e8e;outline:0;position:absolute;width:100%;height:100%;border:none;z-index:1000;cursor:pointer;-moz-border-radius:100%;border-radius:100%;background-color:#ff7f7f;color:#fff;font-size:14px;-webkit-transition:opacity .2s ease-in;-moz-transition:opacity .2s ease-in;transition:opacity .2s ease-in}.menu-btn .img{position:absolute;top:0;left:0;right:0;bottom:0;margin:auto;pointer-events:none;vertical-align:middle;display:block}.menu-btn span{display:block;vertical-align:middle;pointer-events:none}.menu-btn .btn-cross{position:absolute;top:0;left:0;right:0;bottom:0;margin:auto}.menu-wings{pointer-events:none;position:absolute;-webkit-transform-origin:0 50%;-moz-transform-origin:0 50%;-ms-transform-origin:0 50%;transform-origin:0 50%}"],
                changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                animations: [
                    animations_1.trigger('btnText', [
                        animations_1.transition('0 <=> 1', [
                            animations_1.query(':leave', animations_1.style({ opacity: 1, transform: 'scale(1)' })),
                            animations_1.query(':enter', animations_1.style({ opacity: 0, transform: 'scale(0)' })),
                            animations_1.group([
                                animations_1.query(':enter', animations_1.animate('300ms cubic-bezier(0.35, 0, 0.25, 1)', animations_1.style({
                                    opacity: 1,
                                    transform: 'scale(1)'
                                }))),
                                animations_1.query(':leave', animations_1.animate('300ms cubic-bezier(0.35, 0, 0.25, 1)', animations_1.style({
                                    opacity: 0,
                                    transform: 'scale(0)'
                                })))
                            ])
                        ])
                    ]),
                    animations_1.trigger('draggingMenu', [
                        animations_1.transition('1 => 0', [
                            animations_1.style({ top: '{{top}}px', left: '{{left}}px' }),
                            animations_1.animate('900ms cubic-bezier(0.680, -0.550, 0.265, 1.550)', animations_1.style('*'))
                        ])
                    ]),
                    animations_1.trigger('menuState', [
                        animations_1.transition(':enter', [
                            animations_1.style({ transform: 'scale(0)' }),
                            animations_1.animate('500ms cubic-bezier(0.680, -0.550, 0.265, 1.550)', animations_1.style({ transform: 'scale(1)' })),
                            animations_1.query('@rotateWing', animations_1.animateChild())
                        ]),
                        animations_1.transition(':leave', [
                            animations_1.animate('500ms cubic-bezier(0.680, -0.550, 0.265, 1.550)', animations_1.style({ transform: 'scale(0)' }))
                        ]),
                    ])
                ],
            },] },
];
MenuContainerComponent.ctorParameters = function () { return [
    { type: menu_options_service_1.MenuOptions, },
    { type: menu_spin_service_1.SpinService, },
    { type: core_1.Renderer2, },
    { type: core_1.ElementRef, },
]; };
MenuContainerComponent.propDecorators = {
    'menuWingsElm': [{ type: core_1.ViewChild, args: ['menuWings',] },],
    'options': [{ type: core_1.Input },],
    'gutter': [{ type: core_1.Input },],
    'wings': [{ type: core_1.Input },],
    'startAngles': [{ type: core_1.Input },],
    'onWingSelected': [{ type: core_1.Output },],
    'onWingHovered': [{ type: core_1.Output },],
    'onMenuBtnClicked': [{ type: core_1.Output },],
    'onMenuListSpinning': [{ type: core_1.Output },],
    'menuState': [{ type: core_1.HostBinding, args: ['@menuState',] },],
    'draggingState': [{ type: core_1.HostBinding, args: ['@draggingMenu',] },],
    'onMenuMove': [{ type: core_1.HostListener, args: ['document:panmove', ['$event'],] },],
};
exports.MenuContainerComponent = MenuContainerComponent;
//# sourceMappingURL=menu-container.component.js.map