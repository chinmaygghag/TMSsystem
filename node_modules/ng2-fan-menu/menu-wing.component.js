"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var menu_options_service_1 = require("./menu-options.service");
var menu_spin_service_1 = require("./menu-spin.service");
var animations_1 = require("@angular/animations");
var MenuWingComponent = (function () {
    function MenuWingComponent(menuOptions, spinService, elm, renderer) {
        this.menuOptions = menuOptions;
        this.spinService = spinService;
        this.elm = elm;
        this.renderer = renderer;
        this.wingClicked = new core_1.EventEmitter();
        this.wingHovered = new core_1.EventEmitter();
        this.wingSpinning = new core_1.EventEmitter();
        this.scaleWingState = false;
        this.wingSpunDegs = 0;
        this.rotateWingState = { value: '', params: { startAngles: 0 } };
        this.menuConfig = this.menuOptions.MenuConfig;
    }
    MenuWingComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.calculateWingIconSizeAndPosition();
        this.wingSpunSubscriptionId = this.spinService.wingSpun.subscribe(function (data) {
            _this.wingSpunDegs = data;
            _this.setWingIconTransformStyle(_this.wingSpunDegs);
        });
    };
    MenuWingComponent.prototype.ngOnDestroy = function () {
        this.wingSpunSubscriptionId.unsubscribe();
    };
    MenuWingComponent.prototype.ngOnChanges = function (changes) {
        if (changes['position']) {
            this.startAngles = this.menuOptions.StartAngles[this.position];
            this.rotateWingState = { value: '', params: { startAngles: this.startAngles } };
            this.rotateDeg = this.startAngles +
                (this.index * this.menuConfig.angle);
            this.setWingTransformStyle();
            this.wingTextStyle = this.menuOptions.MenuPositions[this.position];
        }
        if (changes['position'] && !changes['position'].isFirstChange()) {
            this.setWingIconTransformStyle(this.wingSpunDegs);
        }
    };
    MenuWingComponent.prototype.ngAfterViewInit = function () {
        this.setWingIconTransformStyle(this.wingSpunDegs);
    };
    MenuWingComponent.prototype.onMouseOver = function () {
        this.scaleWingState = true;
        this.wingHovered.emit(this.wing);
    };
    MenuWingComponent.prototype.onMouseOut = function () {
        this.scaleWingState = false;
    };
    MenuWingComponent.prototype.onClick = function () {
        this.wingClicked.emit(this.wing);
    };
    MenuWingComponent.prototype.onPanStart = function (event) {
        if (this.menuConfig.spinable) {
            this.wingSpinning.emit(true);
            this.spinService.setStartPosition(event.center);
        }
    };
    MenuWingComponent.prototype.spinMenu = function (event) {
        if (this.menuConfig.spinable) {
            this.scaleWingState = false;
            this.spinService.calculateSpinDegrees(event.center);
        }
    };
    MenuWingComponent.prototype.onPanEnd = function (event) {
        if (this.menuConfig.spinable) {
            this.wingSpinning.emit(false);
            this.spinService.setLastSpinDegrees(event.center);
        }
    };
    MenuWingComponent.prototype.setWingTransformStyle = function () {
        this.renderer.setStyle(this.elm.nativeElement, 'transform', 'rotate(' + this.rotateDeg + 'deg)');
        this.renderer.setStyle(this.elm.nativeElement, '-webkit-transform', 'rotate(' + this.rotateDeg + 'deg)');
        this.renderer.setStyle(this.elm.nativeElement, '-ms-transform', 'rotate(' + this.rotateDeg + 'deg)');
        this.renderer.setStyle(this.elm.nativeElement, '-moz-transform', 'rotate(' + this.rotateDeg + 'deg)');
        this.renderer.setStyle(this.elm.nativeElement, '-o-transform', 'rotate(' + this.rotateDeg + 'deg)');
        return;
    };
    MenuWingComponent.prototype.setWingIconTransformStyle = function (deg) {
        if (this.menuConfig.showIcons || this.menuConfig.onlyIcons) {
            this.renderer.setStyle(this.wingIconElm.nativeElement, 'transform', 'translate(' + this.iconX + 'px, ' + this.iconY + 'px) rotate(' + (this.rotateDeg + deg) * -1 + 'deg)');
            this.renderer.setStyle(this.wingIconElm.nativeElement, '-webkit-transform', 'translate(' + this.iconX + 'px, ' + this.iconY + 'px) rotate(' + (this.rotateDeg + deg) * -1 + 'deg)');
            this.renderer.setStyle(this.wingIconElm.nativeElement, '-ms-transform', 'translate(' + this.iconX + 'px, ' + this.iconY + 'px) rotate(' + (this.rotateDeg + deg) * -1 + 'deg)');
            this.renderer.setStyle(this.wingIconElm.nativeElement, '-moz-transform', 'translate(' + this.iconX + 'px, ' + this.iconY + 'px) rotate(' + (this.rotateDeg + deg) * -1 + 'deg)');
            this.renderer.setStyle(this.wingIconElm.nativeElement, '-o-transform', 'translate(' + this.iconX + 'px, ' + this.iconY + 'px) rotate(' + (this.rotateDeg + deg) * -1 + 'deg)');
        }
        return;
    };
    MenuWingComponent.prototype.calculateWingIconSizeAndPosition = function () {
        this.iconSize = this.wing.icon.size || this.menuConfig.wingIconSize;
        if (this.menuConfig.onlyIcons) {
            this.iconX = this.menuConfig.radius - this.menuConfig.radius / 2 + this.iconSize / 4;
        }
        else {
            this.iconX = this.menuConfig.radius - this.iconSize - 8;
        }
        this.iconY = -(this.menuConfig.radius / 2 + this.iconSize / 2 + 5);
        return;
    };
    return MenuWingComponent;
}());
MenuWingComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'app-menu-wing',
                template: "<div class=\"wing wing-{{index}}\" [@scaleWing]=\"scaleWingState\"><svg class=\"wing-svg\" width=\"100%\" height=\"100%\" (panstart)=\"onPanStart($event)\" (panmove)=\"spinMenu($event)\" (panend)=\"onPanEnd($event)\"><path style=\"pointer-events:auto\" (tap)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseout)=\"onMouseOut()\" [attr.fill]=\"wing.color\" [attr.d]=\"svgPath\"></path><text class=\"wing-text\" *ngIf=\"!menuConfig.onlyIcons\" x=\"50%\" y=\"50%\" dominant-baseline=\"central\" style=\"text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2)\" [ngStyle]=\"{'font-size': menuConfig.wingFontSize + 'px'}\" [attr.text-anchor]=\"wingTextStyle.textAnchor\" [attr.transform]=\"'rotate('+ wingTextStyle.textRotate + ', ' + menuConfig.radius/2  + ', ' + menuConfig.radius/2 + ')'\" [attr.fill]=\"wing.titleColor || menuConfig.wingFontColor\">{{wing.title}}</text></svg> <i class=\"{{wing.icon.name}}\" #wingIconElm *ngIf=\"menuConfig.showIcons || menuConfig.onlyIcons\" [ngStyle]=\"{\n            'color': wing.icon.color || menuConfig.wingFontColor,\n            'font-size': iconSize + 'px',\n            'width': iconSize + 'px',\n            'height': iconSize + 'px'\n       }\"></i></div>",
                styles: [":host{display:block;width:100%;height:100%;position:absolute;-webkit-transform-origin:0 50%;-moz-transform-origin:0 50%;-ms-transform-origin:0 50%;transform-origin:0 50%;-webkit-transition:all .3s cubic-bezier(.68,-.55,.265,1.55);-moz-transition:all .3s cubic-bezier(.68,-.55,.265,1.55);transition:all .3s cubic-bezier(.68,-.55,.265,1.55);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.wing{width:inherit;height:inherit;-webkit-transform-origin:inherit;-moz-transform-origin:inherit;-ms-transform-origin:inherit;transform-origin:inherit}.wing i{text-align:center;-webkit-transform-origin:50% 50%;-moz-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%}"],
                changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                animations: [
                    animations_1.trigger('rotateWing', [
                        animations_1.transition(':enter', [
                            animations_1.style({ transform: 'rotate({{startAngles}}deg) scale(0)' }),
                            animations_1.animate('300ms cubic-bezier(0.680, -0.550, 0.265, 1.550)', animations_1.style({ transform: 'rotate({{startAngles}}deg) scale(1)' })),
                            animations_1.animate('300ms 300ms cubic-bezier(0.680, -0.550, 0.265, 1.550)', animations_1.style('*'))
                        ]),
                        animations_1.transition(':leave', [
                            animations_1.animate('300ms cubic-bezier(0.680, -0.550, 0.265, 1.550)', animations_1.style({ transform: 'rotate({{startAngles}}deg) scale(1)' })),
                            animations_1.animate('300ms 300ms cubic-bezier(0.680, -0.550, 0.265, 1.550)', animations_1.style({ transform: 'rotate({{startAngles}}deg) scale(0)' }))
                        ]),
                    ]),
                    animations_1.trigger('scaleWing', [
                        animations_1.state('0', animations_1.style({ transform: 'scale(1)' })),
                        animations_1.state('1', animations_1.style({ transform: 'scale(1.2)' })),
                        animations_1.transition('0<=>1', [
                            animations_1.animate('300ms cubic-bezier(0.680, -0.550, 0.265, 1.550)')
                        ]),
                    ]),
                ],
            },] },
];
MenuWingComponent.ctorParameters = function () { return [
    { type: menu_options_service_1.MenuOptions, },
    { type: menu_spin_service_1.SpinService, },
    { type: core_1.ElementRef, },
    { type: core_1.Renderer2, },
]; };
MenuWingComponent.propDecorators = {
    'wingIconElm': [{ type: core_1.ViewChild, args: ['wingIconElm',] },],
    'wing': [{ type: core_1.Input },],
    'index': [{ type: core_1.Input },],
    'svgPath': [{ type: core_1.Input },],
    'position': [{ type: core_1.Input },],
    'wingClicked': [{ type: core_1.Output },],
    'wingHovered': [{ type: core_1.Output },],
    'wingSpinning': [{ type: core_1.Output },],
    'rotateWingState': [{ type: core_1.HostBinding, args: ['@rotateWing',] },],
};
exports.MenuWingComponent = MenuWingComponent;
//# sourceMappingURL=menu-wing.component.js.map